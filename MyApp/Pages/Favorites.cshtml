@page "/favorites"
@attribute [RenderStatic]
@{
    ViewData["Title"] = "My Favorites";
}

<div id="favorites" class="mx-auto px-6 lg:px-8">
    <div class="mb-8 mx-auto max-w-2xl text-center">
        <h1 class="max-w-4xl font-display text-4xl font-semibold tracking-tight text-slate-50 sm:text-5xl lg:text-6xl">My Favorites</h1>
    </div>
</div>

<div id="app">
    <div class="flex mt-3">
        <div class="z-10 flex-shrink mr-1 sm:mr-2">
            <div class="ml-2 flex flex-col sm:-mt-8 justify-center items-center">
                <img class="hidden h-16 w-16 sm:h-24 sm:w-24 rounded-full" :src="user.profileUrl" alt="">
                <div>
                    <a v-on:click.prevent="navTo({ album: undefined })" href="/favorites">
                        <svg :class="['h-16 w-16 sm:h-24 sm:w-24', selectedAlbum == null ? 'text-red-600 hover:text-red-400' : 'text-cyan-600 hover:text-cyan-400 cursor-pointer']"
                             xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M4.244 12.252a4.25 4.25 0 1 1 6.697-5.111h1.118a4.25 4.25 0 1 1 6.697 5.111L11.5 19.51l-7.256-7.257Zm15.218.71A5.25 5.25 0 1 0 11.5 6.167a5.25 5.25 0 1 0-7.962 6.795l7.962 7.961l7.962-7.96Z" />
                        </svg>
                    </a>
                </div>

                <div class="mb-1" v-on:click.stop="openNewAlbum"
                     :title="activeArtifact == null ? 'select image to include' : ''">
                    <div class="['sm:mt-4 h-16 w-16 sm:h-24 sm:w-24 text-center rounded sm:rounded-lg overflow-hidden font-semibold',
                         activeArtifact != null ? 'text-gray-200 hover:text-white cursor-pointer' : 'text-gray-700']"
                         :style="`background-image:url(data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Crect width='100%25' height='100%25' fill='none' rx='8' ry='8' stroke='%23{SelectedColor}' stroke-width='4' stroke-dasharray='5' stroke-dashoffset='8' /%3E%3C/svg%3E)`">
                        <div class="text-sm sm:text-lg pt-2.5 sm:pt-4 sm:mt-0.5">New</div>
                        <div class="text-sm sm:text-lg">Album</div>
                    </div>
                </div>

                <a v-for="album in store.userAlbums" v-on:click.prevent="navTo({ album: album.id })" :href="'/favorites?album='+album.id">
                    <div :class="['sm:mt-2 hover:opacity-80 cursor-pointer h-16 w-16 sm:h-24 sm:w-24 overflow-hidden rounded sm:rounded-lg border-2',
                                  selectedAlbum?.id == album.id ? 'border-yellow-400' : 'border-transparent']">
                        <artifact-image :artifact="store.albumCover(album)" class="flex w-full h-full" image-class="object-cover"></artifact-image>
                    </div>
                </a>
            </div>
        </div>

        <div class="flex-grow mt-2">
            <div v-if="selectedAlbum">
                <div class="flex justify-between">
                    <div class="w-full sm:w-1/3 sm:pl-2 flex justify-center sm:justify-start items-center whitespace-nowrap">
                        <album-title class="-ml-16 sm:ml-0" :album="selectedAlbum"></album-title>
                    </div>
                    <edit-profile></edit-profile>
                </div>
                <artifact-gallery ref="gallery" :results="results" :resolve-border-color="albumBorderColor" v-on:change="onGalleryChange" columns-slider-class="-ml-16">
                    <template #icons="artifact">
                        <div class="p-3 flex flex-col h-full justify-between">
                            <pin-album-icon :album="selectedAlbum" :artifact="artifact" v-on:changed="update()"></pin-album-icon>
                            <artifact-like-icon :artifact="artifact" v-on:changed="update()"></artifact-like-icon>
                        </div>
                    </template>
                    <template #topmenu>
                        <div v-on:click="_ => moveToTop(context)" class="group whitespace-nowrap flex items-center cursor-pointer text-gray-700 dark:text-gray-300 dark:text-gray-300 dark:hover:bg-gray-800 px-4 py-2 text-sm" role="menuitem" tabindex="-1">
                            <svg class="mr-2 h-5 w-5 text-gray-400 group-hover:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M11 21V10.8l-2.6 2.6L7 12l5-5l5 5l-1.4 1.4l-2.6-2.6V21ZM4 5V3h16v2Z"/></svg>
                            Move to Top
                        </div>
                    </template>
                </artifact-gallery>
            </div>
            <div v-else>
                <div class="flex justify-between">
                    <div class="w-full sm:w-1/3 sm:pl-2 flex justify-center sm:justify-start items-center whitespace-nowrap">
                        <div class="text-xl -ml-16 sm:ml-0">Likes</div>
                    </div>
                    <edit-profile></edit-profile>
                </div>
                <artifact-gallery ref="gallery" :results="results" :resolve-border-color="likesBorderColor" v-on:changed="onGalleryChange" columns-slider-class="-ml-16">
                    <template #icons="artifact">
                        <div class="p-3 flex flex-col h-full justify-between">
                            <artifact-like-icon :artifact="artifact" v-on:changed="update()"></artifact-like-icon>
                            <artifact-explore-icon :artifact="artifact" v-on:click.stop></artifact-explore-icon>
                        </div>
                    </template>
                </artifact-gallery>
            </div>
        </div>        
        
    </div>

    <div class="mt-12 flex justify-center">
        <loading v-if="loadingMore" class="text-gray-400">loading...</loading>
        <span ref="bottom"></span>
    </div>
</div>

<script type="module">
import { ref, inject, onMounted, onUnmounted, computed, getCurrentInstance, nextTick } from "vue"
import { ApiResult, queryString, pick, map } from "@@servicestack/client"
import { useClient, useUtils } from "@@servicestack/vue"
import { mount } from "app.mjs"
import { Store } from "store.mjs"
import { SearchArtifacts, AnonData, QueryArtifacts, UpdateAlbum } from "dtos.mjs"

const EditProfile = {
    template:`<div class="z-10 w-full sm:w-1/3 pr-2 -mt-20 flex justify-end">
          <div class="flex flex-col mb-1 items-center">
              <a class="mb-2" :href="store.searchByCurrentUserUrl">
                  <avatar-image class="h-16 w-16 sm:h-24 sm:w-24 p-1" :user="store.auth"></avatar-image>
              </a>
              <secondary-button v-on:click="openEditProfile">Edit Profile</secondary-button>
          </div>
      </div>`,
    setup(props) {
        const store = inject('store')
        function openEditProfile() {
            
        }
        return { store, openEditProfile }
    }
}

const PinAlbumIcon = {
    template:`<svg v-if="album.primaryArtifactId == artifact.id" v-on:click.stop="unpinArtifact"
        class="w-4 h-4 sm:w-6 sm:h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64">
        <title>unpin</title>
        <path fill="#ffce31" d="M62 25.2H39.1L32 3l-7.1 22.2H2l18.5 13.7l-7 22.1L32 47.3L50.5 61l-7.1-22.2L62 25.2z"/>
    </svg>
    <svg v-else v-on:click.stop="pinArtifact"
        class="w-4 h-4 sm:w-6 sm:h-6 text-cyan-600 hover:text-cyan-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <title>pin as cover image</title>
        <path fill="currentColor" d="M18.27 9.81h-2.82L9.77 4.13l.71-.71l-1.42-1.41l-7.07 7.07l1.42 1.41l.71-.71l5.67 5.68h-.01v2.83l1.42 1.42l3.54-3.55l4.77 4.77l1.41-1.41l-4.77-4.77l3.53-3.53l-1.41-1.41z"/>
    </svg>`,
    emits:['changed'],
    props:['album','artifact'],
    setup(props, { emit }) {
        const client = useClient()

        async function unpinArtifact() {
            const hold = props.album.primaryArtifactId
            store.updateAlbumPrimaryArtifact(props.album.id, null)
            emit('changed', props.album)

            const api = await client.api(new UpdateAlbum({ id:props.album.id, primaryArtifactId:props.artifact.id, unpinPrimaryArtifact:true }))
            if (!api.succeeded) {
                store.updateAlbumPrimaryArtifact(props.album.id, hold)
            }
            emit('changed', api.response)
        }
        async function pinArtifact() {
            const hold = props.album.primaryArtifactId
            store.updateAlbumPrimaryArtifact(props.album.id, props.artifact.id)
            emit('changed', props.album)

            const api = await client.api(new UpdateAlbum({ id:props.album.id, primaryArtifactId:props.artifact.id }))
            if (!api.succeeded) {
                store.updateAlbumPrimaryArtifact(props.album.id, hold)
            }
            emit('changed', api.response)
        }
        
        return { unpinArtifact, pinArtifact }
    }
}

const App = {
    components: { EditProfile, PinAlbumIcon },
    setup() {
        const store = inject('store')
        const client = useClient()
        const { pushState } = useUtils()
        const qs = queryString(location.search)

        const gallery = ref()
        const selectedAlbum = ref()
        const user = computed(() => store.userData?.user)
        const results = ref([])
        const activeArtifact = ref()
        const instance = getCurrentInstance()
        
        function openNewAlbum() {}

        function likesBorderColor(artifact) {
            return store.isModerator && store.isModerated(artifact)
                ? "border-gray-500"
                : store.hasArtifactInAlbum(artifact)
                  ? "border-green-700"
                  : artifact.background != null ? "border-black" : "border-transparent";
        }

        function albumBorderColor(artifact) {
            return store.isModerator && store.isModerated(artifact)
                ? "border-gray-500"
                : store.hasArtifactInAlbum(artifact)
                  ? "border-green-700"
                  : artifact.background != null ? "border-black" : "border-transparent";
        }
        
        function onGalleryChange() { update() }
        
        const bottom = ref()
        const loadingMore = ref(false)
        let hasMore = ref(false)
        const title = ref('')
        
        function navTo(args) {
            selectedAlbum.value = args.album && store.userData.user?.albums.find(x => x.id === args.album)
            pushState(args)
            update()
        }
        
        async function update() {
            await fetchResults(store.InitialTake)
        }
        
        async function fetchResults(count) {
            const nextResults = selectedAlbum.value
                ? await store.getAlbumArtifacts(selectedAlbum.value, count)
                : await store.getLikedArtifacts(count)
            hasMore.value = nextResults.length >= count
            results.value = nextResults
            console.log('fetchResults', selectedAlbum.value || 'likes', count,  hasMore.value, nextResults.length)
            instance?.proxy?.$forceUpdate()    
        }
        
        async function loadMore() {
            console.log('loadMore', selectedAlbum.value || 'likes', hasMore.value, results.value.length)
            if (hasMore.value) {
                await fetchResults(results.value.length + store.NextPage)
            }
        }
        
        let observer = null
        
        onMounted(async () => {            
            await store.load()
            if (qs.album) {
                selectedAlbum.value = store.userData.user?.albums.find(x => x.id === parseInt(qs.album)) 
            }
            await Promise.all([
                store.loadCachedUserArtifacts(),
                update()
            ])
                        
            instance?.proxy?.$forceUpdate()    
            nextTick(async () => {
                await store.loadUserArtifacts()
                instance?.proxy?.$forceUpdate()    
            })
                        
            setTimeout(() => {
                observer = new IntersectionObserver(
                    ([{isIntersecting, target}]) => { 
                        if (isIntersecting) loadMore() 
                    }, { threshold: 1.0 })
                observer.observe(bottom.value)
            }, 1000)
        })
        onUnmounted(() => observer.unobserve())
        
        return { 
            store, user, title, selectedAlbum, results, gallery, activeArtifact, hasMore, bottom, loadingMore, 
            navTo, update, openNewAlbum, onGalleryChange, likesBorderColor, albumBorderColor, 
        }
    }
}

mount('#app', App)
</script>