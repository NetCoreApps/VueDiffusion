@page "/"
@attribute [RenderStatic]
@{
    ViewData["Title"] = "Vue Diffusion";
}

<div id="search" class="mx-auto px-6 lg:px-8">
    <div class="mb-8 mx-auto max-w-2xl text-center">
        <h1 class="max-w-4xl font-display text-4xl font-semibold tracking-tight text-slate-50 sm:text-5xl lg:text-6xl">Stable Diffusion Search</h1>
        <form v-on:submit.prevent="update" class="mt-8 text-lg mx-auto max-w-lg flex justify-center">
            <text-input id="query" type="search" v-model="request.query" class="bg-transparent h-8 w-96" label="" placeholder="Search existing images"></text-input>
        </form>
    </div>

    <div class="flex">
        <div class="flex flex-col flex-shrink">
            <div class="z-10 flex-shrink sm:mr-2">
                <div v-if="topAlbums.length" class="flex flex-col sm:-ml-4 -mt-8 pt-1 sm:pt-2 justify-center items-center">
                    <div class="text-xs sm:text-sm text-gray-500 whitespace-nowrap w-16 sm:w-24 text-center pb-1">top albums</div>
                    <a :key="album.slug" v-for="album in topAlbums" :href="`/albums/${album.slug}`">
                        <div :class="['sm:mt-2 hover:opacity-80 cursor-pointer h-16 w-16 sm:h-24 sm:w-24 overflow-hidden rounded sm:rounded-lg border-2',
                                      album == album.albumRef ? 'border-yellow-400' : 'border-transparent']">
                            <artifact-image :artifact="albumCover(album)" class="flex w-full h-full" image-class="object-cover"></artifact-image>
                        </div>
                    </a>
                    <a href="/albums/" to="/albums" class="text-xs sm:text-sm text-gray-500 dark:hover:text-gray-300 whitespace-nowrap w-16 sm:w-24 text-center pb-1">more</a>
                </div>
            </div>
        </div>
        <artifact-gallery :results="results"></artifact-gallery>
    </div>
    <div class="mt-12 flex justify-center">
        <loading v-if="loadingMore" class="text-gray-400">loading...</loading>
        <span ref="bottom"></span>
    </div>
</div>

<script type="module">
import { ref, inject, onMounted, onUnmounted, computed } from "vue"
import { ApiResult, queryString, pick } from "@@servicestack/client"
import { useClient, useUtils } from "@@servicestack/vue"
import { mount } from "app.mjs"
import { Store } from "store.mjs"
import { SearchArtifacts, AnonData, QueryArtifacts } from "dtos.mjs"

const Search = {
    setup() {
        const store = inject('store')
        const client = useClient()
        const { pushState } = useUtils()
        const results = ref([])
        const api = ref(new ApiResult())
        const topAlbums = ref([])
        const request = ref(new SearchArtifacts({
            query: '',
            skip: 0,
            take: 50
        }))
        const bottom = ref()
        const loadingMore = ref(false)
        let hasMore = false
        
        async function update() {
            request.value.skip = 0
            request.value.take = 50
            // clear existing search params
            let args = Object.assign(Object.keys(queryString(location.search)).reduce((acc,x) => {acc[x] = undefined; return acc}, {}),
                { query: request.value.query || undefined })
            pushState(args)
            api.value = await client.api(request.value)
            if (api.value.succeeded) {
                results.value = api.value.response?.results || []
                hasMore = results.value.length === request.value.take
            }
        }
        
        const artifactsMap = ref({})
        
        function loadArtifacts(api) {
            const artifacts = api.response?.results || []
            artifacts.forEach(artifact => {
                artifactsMap.value[artifact.id] = artifact
            })
        }
        
        function albumCover(album) {
            return artifactsMap.value[store.getAlbumCoverArtifactId(album)]
        }
        
        async function loadMore() {
            console.log('load more...', hasMore)
            if (hasMore) {
                request.value.skip += request.value.take
                request.value.take = 100
                loadingMore.value = true
                api.value = await client.api(request.value)
                loadingMore.value = false
                if (api.value.succeeded) {
                    const moreResults = api.value.response?.results || []
                    results.value.push(...moreResults)
                    hasMore = moreResults.length === request.value.take
                }
            }
        }
        
        let observer = null
        
        onMounted(async () => {
            const qs = queryString(location.search)
            const requestArgs = pick(qs, ['query','similar','by','user','modifier','artist','album'])
            Object.assign(request.value, requestArgs)
            
            await Promise.all([
                client.swr(request.value, r => {
                    api.value = r
                    results.value = r.response?.results || []
                    hasMore = results.value.length === request.value.take
                }),
                client.swr(new AnonData(), async api => {
                    topAlbums.value = api.response?.topAlbums || []
                    const albumIds = topAlbums.value.map(store.getAlbumCoverArtifactId)
                    if (albumIds.length > 0)
                        await client.swr(new QueryArtifacts({ ids:albumIds }), loadArtifacts)
                })
            ])
            setTimeout(() => {
                observer = new IntersectionObserver(
                    ([{isIntersecting, target}]) => { 
                        if (isIntersecting) loadMore() 
                    }, { threshold: 1.0 })
                observer.observe(bottom.value)
            }, 1000)
        })
        onUnmounted(() => observer.unobserve())
        
        return { 
            request, api, topAlbums, results, update, albumCover, bottom, loadingMore,
        }
    }
}

mount('#search', Search, { })
</script>